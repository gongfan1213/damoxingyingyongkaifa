#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   writingPolishingFunction.py
@Time    :   2025/03/15 15:07:37
@Author  :   iflytek
@Version :   1.0
@Desc    :   写作润色功能核心代码
'''


from fastapi import APIRouter, Depends,HTTPException
from deps.depends import get_db,get_redis_client,get_spark,get_write_gpt
from dao import crud
from bo import schemas
from log.log import logger
from sqlalchemy.orm import Session
import requests
from config import env_config
from utils.count_word import count_word,count_word_intercept
import json
import uuid
from dao import models

router = APIRouter()
# 使用router获取post请求的数据
@router.post("/single_paragraph")
async def single_paragraph(
input_text: schemas.InputCheck,
llm = Depends(get_spark),
db:Session = Depends(get_db),
redis_client=Depends(get_redis_client),
write_gpt=Depends(get_write_gpt)
):
  content = input_text.text
  token_str = input_text.access_token
  if not count_word_intercept(input_text.text, input_text.language):
    return {
      "status": "error",
      "message": "输入文本字数过长"
    }
  user = crud.get_current_user(token_str,db)
  word_num = count_word(content)
  
  #print('测试',db.query(models.User).filter(models.User.id == user.id).first().initial_token,crud.get_user_all_token_num(db,user.id),word_num)
  if(db.query(models.User).filter(models.User.id == user.id).first().initial_token - crud.get_user_all_token_num(db,user.id) - word_num< 0):
    return {
      "status":"error",
      "message":"您的剩余Token已不够，请增加您的Token上限"
    }
  crud.update_user_token_num(db, user.id, 5, word_num)
  try:
    #使用自有模型修正Prompt，language == 0 为英文，否则为中文
    if input_text.language == 0:
      #fix_instruction="Below is a paragraph from an academic paper. Please improve the spelling and grammar and make the text fluent.Modify the text slightly and provide only a corrected version of the text."
      fix_instruction="As an expert in grammar checking, find all the misspellings, grammatical errors, and other errors in the following text. Also give description of the error in Chinese. You only have to return the corrected text, without any other informantion. If no error is found, return the origin text."
      grammar_instruction = "As an expert in grammar checking, find all the misspellings, grammatical errors, and other errors in the following text. Also give description of the error in Chinese. If no error is found, return \"[]\". "
    else:
      #fix_instruction = "下面是一篇学术论文的段落。请检查错别字，语句是否通畅还有语法是否正确，同时改善上述缺点，请轻微修改文本。请只提供更正后的文本。"
      fix_instruction = "作为中文语法检查专家，找出以下文本中的所有错别字、漏字、多余字、语法错误（用词不当、动宾搭配不当、主宾搭配不当、修饰语和中心词搭配不当、介词使用不当）和其他错误（成分残缺、成分多余、句式杂糅）。 你只需要给出正确的文本，不包含其他信息。若没有错误，返回原来的文本。"
      grammar_instruction = '作为中文语法检查专家，找出以下文本中的所有错别字、漏字、多余字、语法错误和其他错误。 并给出错误的中文描述。 如果没有发现错误，则返回“[]”。\n'
    fix_param = {
      "instruction":fix_instruction,
      "input":content,
      "payload":{"prompt_index":5,"prompt_intensity_index":1}
    }
    grammar_param = {
      "instruction":grammar_instruction,
      "input":content,
      "payload":{"prompt_index":6,"prompt_intensity_index":1}
    }
    fix_uuid = str(uuid.uuid4()) # 32
    fix_uuid = fix_uuid + str(user.id)
    fix_params = json.dumps(fix_param)    
    grammar_uuid = str(uuid.uuid4()) # 32
    grammar_uuid = grammar_uuid + str(user.id)
    grammar_params = json.dumps(grammar_param)

    if redis_client.set(fix_uuid, fix_params) and redis_client.set(grammar_uuid, grammar_params) and redis_client.expire(fix_uuid,60 * 10) and redis_client.expire(grammar_uuid, 60 * 10):
        logger.info('chat: ' + user.user_name + 'set grammar correction redis success')
        return {"corrected":fix_uuid, "detailed":grammar_uuid, "status": "success", "message": "消息发送成功"}
    else:
      raise HTTPException(status_code=404, detail="Something Wrong in redis")
  except Exception as error:
    logger.error('chat: ' + user.user_name + ' check single_paragraph error')
    raise HTTPException(status_code=404, detail="No response generated by the model.")